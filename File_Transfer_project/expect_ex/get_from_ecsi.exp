#!/usr/local/bin/expect --
#####
##### Script Name: get_from_ecsi.exp
#####
##### Author:  Murthy Eleswarapu   email:  eleswarapu.1@osu.edu
#####
##### Date:  09/10/2012
#####
#####
##### Modifications:
#####
#####
#####
##### Subroutine definitions.
#####
####################################################################
###                                                              ###
### First wait for a "sftp> " prompt.  Then, when the prompt     ###
### appears again, send the command.                             ###
###                                                              ###
###                                                              ###
####################################################################
proc issue_ftp_command { command_string time_out_value} \
     {
     set timeout 10
     set PROMPT "sftp> "
     send "\r"
     expect {
               "$PROMPT"  { }

               timeout    { \
                            puts "Time out at $timeout seconds waiting for prompt string \"$PROMPT\"."
                            puts "Aborting..."
                            puts "---  [exec date]  ---"
                            exit 3
                          }
            }

     set timeout $time_out_value

     send "$command_string\r" 

     expect {
               "$PROMPT" { }

               timeout    { \
                            puts "Time out at $timeout seconds waiting for command \"$command_string\" to complete."
                            puts "Aborting..."
                            puts "---  [exec date]  ---"
                            exit 3
                          }

               eof        { \
                          }
            }

     }
     

########
########
######## Start of main().
########
########
#exp_internal 1
stty echo


set pword "*******"
set host "dcslbsys@he8.erp.ohio-state.edu"

###set pword "********"
###set host "userid@ftp.ecsi.net"

set argc [llength $argv]
send_user "\n#####\n# $argc\n#####\n"


# Conditions may contain the command return values.
#set ret [expr [pid] == 0]

puts "Starting connection for ECSI file transfers."
puts "---  [exec date]  ---"

spawn sftp $host

###
### If a first time sftp connection by the user RSA keys need to be
### created.  sftp will issue a continue (yes/no)? string.
### "yes" must be typed out in full.
### 
### If there is a no prompt, the "expect" line will just timeout
### and continue.

set timeout 3
expect "(yes/no)?" {send "yes\r"}

set timeout 20
expect "password:"
send "$pword\r"

set command [lindex $argv 0]
set filename [lindex $argv 1]
set status "Couldn|Fetching" 


if {[string match "get" $command]} \
 { \
   issue_ftp_command "lumask 022" 500
   issue_ftp_command "$command $filename" 500

   expect {  \
            "Couldn|Fetching" 
           
                 { 
                  set $status $expect_out(buffer) 
                  puts " XXXX \n $status  \n XXX "
                      
                 } 
           }
   eof    {
              send -- "\r"  
           }
    if {[string match "Couldn" $status]} \
        { \
            puts "No such file or directory."
            set status "nofile"
            default {exit 1}
         } else {\
                  if {[string match "Fetching" $status]} 
                       {
                         puts "Fetching the file $filename "
                         set status "file"
                         set command "rm"
	                 issue_ftp_command "$command $filename" 500
	                 default {exit 0}
	                } \
                 } \
     issue_ftp_command "quit" 100
  stty echo

 
 }
 
puts "Get File transfers completed successfully."
puts "---  [exec date]  ---"




